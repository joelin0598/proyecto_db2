--Creacion de areas de trabajo
CREATE USER C##stage IDENTIFIED BY stage123;
CREATE USER C##dw IDENTIFIED BY dw123;
CREATE USER C##produccion IDENTIFIED BY prod123;

-- Cuotas
ALTER USER C##stage      QUOTA UNLIMITED ON USERS;
ALTER USER C##dw         QUOTA UNLIMITED ON USERS;
ALTER USER C##produccion QUOTA UNLIMITED ON USERS;

-- Roles básicos
GRANT CONNECT, RESOURCE TO C##stage, C##dw, C##produccion;



-- AMBIENTE: STAGE
-- Usuario: C##STAGE

CREATE TABLE C##STAGE.BD2_STG_DATOS (
  ANIO NUMBER,
  FECHA DATE,
  HORA VARCHAR2(6),
  RONDA VARCHAR2(50),
  ESTADIO VARCHAR2(100),
  CIUDAD VARCHAR2(100),
  PAIS VARCHAR2(100),
  EQUIPO_LOCAL VARCHAR2(100),
  GOL_LOCAL NUMBER,
  EQUIPO_VISITA VARCHAR2(100),
  GOL_VISITA NUMBER,
  ASISTENCIA NUMBER
);
 


-----------------------------------------------------------
-- AMBIENTE: DATA WAREHOUSE
-- Usuario: C##DW

-- Dimensiones
CREATE TABLE C##DW.BD2_DIM_HORA (
  HORA_KEY NUMBER PRIMARY KEY,
  HORA VARCHAR2(5)
);

CREATE TABLE C##DW.BD2_DIM_SELECCION (
  SELECCION_KEY NUMBER PRIMARY KEY,
  NOMBRE_SELECCION VARCHAR2(100)
);

CREATE TABLE C##DW.BD2_DIM_RONDA (
  RONDA_KEY NUMBER PRIMARY KEY,
  NOMBRE_RONDA VARCHAR2(50)
);

CREATE TABLE C##DW.BD2_DIM_PAIS_ORGANIZADOR (
  PAIS_KEY NUMBER PRIMARY KEY,
  NOMBRE_PAIS_ORGANIZADOR VARCHAR2(100)
);

CREATE TABLE C##DW.BD2_DIM_CIUDAD (
  CIUDAD_KEY NUMBER PRIMARY KEY,
  CIUDAD_ORGANIZADOR VARCHAR2(100),
  PAIS_KEY NUMBER,
  CONSTRAINT FK_CIUDAD_PAIS FOREIGN KEY (PAIS_KEY)
    REFERENCES C##DW.BD2_DIM_PAIS_ORGANIZADOR (PAIS_KEY)
);

CREATE TABLE C##DW.BD2_DIM_ESTADIO (
  ESTADIO_KEY NUMBER PRIMARY KEY,
  NOMBRE_ESTADIO VARCHAR2(100),
  CIUDAD_KEY NUMBER,
  CONSTRAINT FK_ESTADIO_CIUDAD FOREIGN KEY (CIUDAD_KEY)
    REFERENCES C##DW.BD2_DIM_CIUDAD (CIUDAD_KEY)
);

-- Tabla de hechos
CREATE TABLE C##DW.BD2_HECHOS (
  ANIO NUMBER,
  FECHA_KEY NUMBER,
  HORA_KEY NUMBER,
  RONDA_KEY NUMBER,
  ESTADIO_KEY NUMBER,
  LOCAL_KEY NUMBER,
  VISITANTE_KEY NUMBER,
  GOL_LOCAL NUMBER,
  GOL_VISITA NUMBER,
  ASISTENCIA NUMBER
);

-- Watermark
CREATE TABLE C##DW.WATERMARK
(
  TABLA VARCHAR2(30),
  PK NUMBER(6,0),
  OPERACION VARCHAR2(1),
  FECHA_INSERT DATE,
  MIGRO VARCHAR2(1) DEFAULT 'N',
  FECHA_OPERADO DATE
);


---------------------------------------------------------
-- AMBIENTE: PRODUCCIÓN
-- Usuario: C##PRODUCCION

CREATE TABLE C##PRODUCCION.BD2_NO_HECHOS (
  ANIO NUMBER,
  FECHA_KEY NUMBER,
  FECHA_COD DATE,
  HORA_KEY NUMBER,
  HORA_COD VARCHAR2(5),
  RONDA_KEY NUMBER,
  NOMBRE_RONDA VARCHAR2(50),
  ESTADIO_KEY NUMBER,
  ESTADIO VARCHAR2(100),
  CIUDAD VARCHAR2(100),
  PAIS VARCHAR2(100),
  LOCAL_KEY NUMBER,
  EQUIPO_LOCAL VARCHAR2(100),
  VISITANTE_KEY NUMBER,
  EQUIPO_VISITA VARCHAR2(100),
  GOL_LOCAL NUMBER,
  GOL_VISITA NUMBER,
  ASISTENCIA NUMBER
);

CREATE TABLE C##PRODUCCION.BD2_CORRELATIVOS (
  DIMENSION VARCHAR2(30),
  VALOR NUMBER(5)
);

CREATE TABLE C##PRODUCCION.BD2_VALORES_DEFAULT (
  CAMPO VARCHAR2(30),
  VALOR NUMBER(38,2)
);

CREATE TABLE C##PRODUCCION.BD2_SEGUIMIENTO (
  DIMENSION VARCHAR2(30),
  USUARIO VARCHAR2(30),
  FECHA DATE
);

---------------------------------------------------
--Sinonimos stage
CREATE SYNONYM BD2_STG_DATOS FOR C##STAGE.BD2_STG_DATOS;
--Sinonimos  DW
CREATE SYNONYM BD2_DIM_HORA FOR C##DW.BD2_DIM_HORA;
CREATE SYNONYM BD2_DIM_SELECCION FOR C##DW.BD2_DIM_SELECCION;
CREATE SYNONYM BD2_DIM_RONDA FOR C##DW.BD2_DIM_RONDA;
CREATE SYNONYM BD2_DIM_PAIS_ORGANIZADOR FOR C##DW.BD2_DIM_PAIS_ORGANIZADOR;
CREATE SYNONYM BD2_DIM_CIUDAD FOR C##DW.BD2_DIM_CIUDAD;
CREATE SYNONYM BD2_DIM_ESTADIO FOR C##DW.BD2_DIM_ESTADIO;
CREATE SYNONYM BD2_HECHOS FOR C##DW.BD2_HECHOS;
CREATE SYNONYM WATERMARK FOR C##DW.WATERMARK;
--Sinonimos Produccion
CREATE SYNONYM BD2_NO_HECHOS FOR C##PRODUCCION.BD2_NO_HECHOS;
CREATE SYNONYM BD2_CORRELATIVOS FOR C##PRODUCCION.BD2_CORRELATIVOS;
CREATE SYNONYM BD2_VALORES_DEFAULT FOR C##PRODUCCION.BD2_VALORES_DEFAULT;
CREATE SYNONYM BD2_SEGUIMIENTO FOR C##PRODUCCION.BD2_SEGUIMIENTO;

------------------------------------------------------

---Permisos Stage
GRANT SELECT, UPDATE ON BD2_NO_HECHOS TO C##stage;
GRANT SELECT, UPDATE ON BD2_CORRELATIVOS TO C##stage;
GRANT SELECT, UPDATE ON BD2_VALORES_DEFAULT  TO C##stage;
GRANT SELECT, UPDATE ON BD2_SEGUIMIENTO TO C##stage;

---Permisos  Dw
GRANT SELECT ON BD2_STG_DATOS TO C##dw;
GRANT SELECT, INSERT, UPDATE, DELETE ON BD2_STG_DATOS TO C##DW;

GRANT SELECT ON BD2_DIM_HORA TO C##PRODUCCION;
GRANT SELECT ON BD2_DIM_SELECCION TO C##PRODUCCION;
GRANT SELECT ON BD2_DIM_RONDA TO C##PRODUCCION;
GRANT SELECT ON BD2_DIM_PAIS_ORGANIZADOR TO C##PRODUCCION;
GRANT SELECT ON BD2_DIM_CIUDAD TO C##PRODUCCION;
GRANT SELECT ON BD2_DIM_ESTADIO TO C##PRODUCCION;
GRANT SELECT ON BD2_HECHOS TO C##PRODUCCION;
GRANT SELECT ON WATERMARK TO C##STAGE;
GRANT SELECT ON WATERMARK TO C##PRODUCCION;

---Permisos producccion
GRANT SELECT, INSERT, UPDATE, DELETE ON BD2_STG_DATOS TO C##PRODUCCION;
GRANT SELECT ON BD2_NO_HECHOS TO C##stage;
GRANT SELECT ON BD2_NO_HECHOS TO C##DW;

GRANT INSERT ON BD2_SEGUIMIENTO TO C##stage;
GRANT SELECT, INSERT, UPDATE ON BD2_CORRELATIVOS TO C##dw;
GRANT SELECT ON BD2_CORRELATIVOS TO C##DW;
GRANT SELECT ON BD2_VALORES_DEFAULT TO C##DW;
GRANT SELECT ON BD2_SEGUIMIENTO TO C##DW;

---Triggers para tabla de produccion 

CREATE OR REPLACE TRIGGER C##PRODUCCION.TRG_TABLA_SINC
AFTER INSERT OR UPDATE ON BD2_NO_HECHOS
FOR EACH ROW
DECLARE
  v_operacion CHAR(1);
BEGIN
  IF INSERTING THEN
    v_operacion := 'I';
  ELSE
    v_operacion := 'U';
  END IF;

  INSERT INTO C##DW.WATERMARK (TABLA, PK, OPERACION, FECHA_INSERT)
  VALUES (
    'BD2_NO_HECHOS',
    NVL(:NEW.FECHA_KEY, -1),
    v_operacion,
    SYSDATE
  );
END;

--------------------------------

CREATE OR REPLACE PROCEDURE C##STAGE.PRC_SINCRONIZACION AS
BEGIN
  -- Paso 1: Borrar registros anteriores en la tabla Stage
  DELETE FROM BD2_STG_DATOS WHERE 1=1;

  -- Paso 2: Insertar nueva información (simulada aquí desde una tabla temporal)
  INSERT INTO BD2_STG_DATOS
    SELECT ANIO,
           FECHA_COD,
           HORA_COD,
           NOMBRE_RONDA,
           ESTADIO,
           CIUDAD,
           PAIS,
           EQUIPO_LOCAL,
           GOL_LOCAL,
           EQUIPO_VISITA,
           GOL_VISITA,
           ASISTENCIA
      FROM BD2_NO_HECHOS;

  -- Paso 3: Registrar que se hizo una sincronización
  INSERT INTO BD2_SEGUIMIENTO (
    DIMENSION,
    USUARIO,
    FECHA
  ) VALUES (
    'BD2_STG_DATOS',
    USER,
    SYSDATE
  );
END;


/* =========================================================
   9.  PROCEDIMIENTO  PRC_DEVUELVE_CORRELATIVOS  (DW)
   =========================================================*/
CREATE OR REPLACE PROCEDURE C##dw.PRC_DEVUELVE_CORRELATIVOS
  (p_dimension IN  VARCHAR2,
   p_valor     OUT NUMBER) IS
BEGIN
  SELECT valor
    INTO p_valor
    FROM BD2_CORRELATIVOS
   WHERE dimension = p_dimension
   FOR UPDATE;

  UPDATE BD2_CORRELATIVOS
     SET valor = valor + 1
   WHERE dimension = p_dimension;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    p_valor := 1;
    INSERT INTO BD2_CORRELATIVOS (dimension, valor)
    VALUES (p_dimension, 2);
END;
/

/* =========================================================
  10. TRIGGERS DE CLAVE SURROGADA EN CADA DIMENSIÓN (DW)
   =========================================================*/
-- Ejemplo: HORA
CREATE OR REPLACE TRIGGER C##dw.TRG_PK_DIM_HORA
BEFORE INSERT ON BD2_DIM_HORA
FOR EACH ROW
BEGIN
  C##dw.PRC_DEVUELVE_CORRELATIVOS('BD2_DIM_HORA', :NEW.HORA_KEY);
END;
/

-- Replica para cada dimensión
CREATE OR REPLACE TRIGGER C##dw.TRG_PK_DIM_SELECCION
BEFORE INSERT ON BD2_DIM_SELECCION
FOR EACH ROW
BEGIN
  C##dw.PRC_DEVUELVE_CORRELATIVOS('BD2_DIM_SELECCION', :NEW.SELECCION_KEY);
END;
/

CREATE OR REPLACE TRIGGER C##dw.TRG_PK_DIM_RONDA
BEFORE INSERT ON BD2_DIM_RONDA
FOR EACH ROW
BEGIN
  C##dw.PRC_DEVUELVE_CORRELATIVOS('BD2_DIM_RONDA', :NEW.RONDA_KEY);
END;
/

CREATE OR REPLACE TRIGGER C##dw.TRG_PK_DIM_PAIS
BEFORE INSERT ON BD2_DIM_PAIS_ORGANIZADOR
FOR EACH ROW
BEGIN
  C##dw.PRC_DEVUELVE_CORRELATIVOS('BD2_DIM_PAIS_ORGANIZADOR', :NEW.PAIS_KEY);
END;

CREATE OR REPLACE TRIGGER C##dw.TRG_PK_DIM_CIUDAD
BEFORE INSERT ON BD2_DIM_CIUDAD
FOR EACH ROW
BEGIN
  C##dw.PRC_DEVUELVE_CORRELATIVOS('BD2_DIM_CIUDAD', :NEW.CIUDAD_KEY);
END;

CREATE OR REPLACE TRIGGER C##dw.TRG_PK_DIM_ESTADIO
BEFORE INSERT ON BD2_DIM_ESTADIO
FOR EACH ROW
BEGIN
  C##dw.PRC_DEVUELVE_CORRELATIVOS('BD2_DIM_ESTADIO', :NEW.ESTADIO_KEY);
END;
/

/* =========================================================
  11. PROCEDIMIENTOS DE CARGA / MERGE POR DIMENSIÓN
   =========================================================*/
-- Hora
CREATE OR REPLACE PROCEDURE C##dw.PRC_DIM_HORA(p_accion IN NUMBER) AS
BEGIN
  IF p_accion = 1 THEN
    MERGE INTO BD2_DIM_HORA d
    USING (SELECT DISTINCT HORA FROM BD2_STG_DATOS) s
    ON (d.HORA = s.HORA)
    WHEN NOT MATCHED THEN
      INSERT (HORA_KEY, HORA) VALUES (NULL, s.HORA);
  END IF;
END;
/

-- Selección
CREATE OR REPLACE PROCEDURE C##dw.PRC_DIM_SELECCION(p_accion IN NUMBER) AS
BEGIN
  IF p_accion = 1 THEN
    MERGE INTO BD2_DIM_SELECCION d
    USING (
      SELECT DISTINCT EQUIPO_LOCAL AS NOMBRE_SELECCION FROM BD2_STG_DATOS
      UNION
      SELECT DISTINCT EQUIPO_VISITA FROM BD2_STG_DATOS
    ) s
    ON (d.NOMBRE_SELECCION = s.NOMBRE_SELECCION)
    WHEN NOT MATCHED THEN
      INSERT (SELECCION_KEY, NOMBRE_SELECCION)
      VALUES (NULL, s.NOMBRE_SELECCION);
  END IF;
END;
/

-- Ronda
CREATE OR REPLACE PROCEDURE C##dw.PRC_DIM_RONDA(p_accion IN NUMBER) AS
BEGIN
  IF p_accion = 1 THEN
    MERGE INTO BD2_DIM_RONDA d
    USING (SELECT DISTINCT RONDA AS NOMBRE_RONDA FROM BD2_STG_DATOS) s
    ON (d.NOMBRE_RONDA = s.NOMBRE_RONDA)
    WHEN NOT MATCHED THEN
      INSERT (RONDA_KEY, NOMBRE_RONDA) VALUES (NULL, s.NOMBRE_RONDA);
  END IF;
END;
/

-- País
CREATE OR REPLACE PROCEDURE C##dw.PRC_DIM_PAIS(p_accion IN NUMBER) AS
BEGIN
  IF p_accion = 1 THEN
    MERGE INTO BD2_DIM_PAIS_ORGANIZADOR d
    USING (SELECT DISTINCT PAIS AS NOMBRE_PAIS_ORGANIZADOR FROM BD2_STG_DATOS) s
    ON (d.NOMBRE_PAIS_ORGANIZADOR = s.NOMBRE_PAIS_ORGANIZADOR)
    WHEN NOT MATCHED THEN
      INSERT (PAIS_KEY, NOMBRE_PAIS_ORGANIZADOR) VALUES (NULL, s.NOMBRE_PAIS_ORGANIZADOR);
  END IF;
END;
/

-- Ciudad
CREATE OR REPLACE PROCEDURE C##dw.PRC_DIM_CIUDAD(p_accion IN NUMBER) AS
BEGIN
  IF p_accion = 1 THEN
    MERGE INTO BD2_DIM_CIUDAD d
    USING (
      SELECT DISTINCT
             CIUDAD           AS CIUDAD_ORGANIZADOR,
             (SELECT p.PAIS_KEY
                FROM BD2_DIM_PAIS_ORGANIZADOR p
               WHERE p.NOMBRE_PAIS_ORGANIZADOR = s.PAIS
               FETCH FIRST 1 ROWS ONLY) AS PAIS_KEY
      FROM   BD2_STG_DATOS s
    ) s
    ON (d.CIUDAD_ORGANIZADOR = s.CIUDAD_ORGANIZADOR)
    WHEN NOT MATCHED THEN
      INSERT (CIUDAD_KEY, CIUDAD_ORGANIZADOR, PAIS_KEY)
      VALUES (NULL, s.CIUDAD_ORGANIZADOR, s.PAIS_KEY);
  END IF;
END;
/

-- Estadio
CREATE OR REPLACE PROCEDURE C##dw.PRC_DIM_ESTADIO(p_accion IN NUMBER) AS
BEGIN
  IF p_accion = 1 THEN
    MERGE INTO BD2_DIM_ESTADIO d
    USING (
      SELECT DISTINCT
             ESTADIO AS NOMBRE_ESTADIO,
             (SELECT c.CIUDAD_KEY
                FROM BD2_DIM_CIUDAD c
               WHERE c.CIUDAD_ORGANIZADOR = s.CIUDAD
               FETCH FIRST 1 ROWS ONLY) AS CIUDAD_KEY
        FROM BD2_STG_DATOS s
    ) s
    ON (d.NOMBRE_ESTADIO = s.NOMBRE_ESTADIO)
    WHEN NOT MATCHED THEN
      INSERT (ESTADIO_KEY, NOMBRE_ESTADIO, CIUDAD_KEY)
      VALUES (NULL, s.NOMBRE_ESTADIO, s.CIUDAD_KEY);
  END IF;
END;
/

/* =========================================================
  12. PROCEDIMIENTO DE CONSTRUCCIÓN DE HECHOS (DW)
   =========================================================*/
CREATE OR REPLACE PROCEDURE C##dw.PRC_CONSTRUYE_HECHOS(p_accion IN NUMBER) AS
BEGIN
  IF p_accion = 1 THEN
    INSERT INTO BD2_HECHOS
    SELECT s.ANIO,
           TO_NUMBER(TO_CHAR(s.FECHA,'J'))                          AS FECHA_KEY,
           h.HORA_KEY,
           r.RONDA_KEY,
           e.ESTADIO_KEY,
           l.SELECCION_KEY,
           v.SELECCION_KEY,
           s.GOL_LOCAL,
           s.GOL_VISITA,
           s.ASISTENCIA
      FROM BD2_STG_DATOS s
      LEFT JOIN BD2_DIM_HORA              h ON (h.HORA               = s.HORA)
      LEFT JOIN BD2_DIM_RONDA             r ON (r.NOMBRE_RONDA       = s.RONDA)
      LEFT JOIN BD2_DIM_ESTADIO           e ON (e.NOMBRE_ESTADIO      = s.ESTADIO)
      LEFT JOIN BD2_DIM_SELECCION         l ON (l.NOMBRE_SELECCION    = s.EQUIPO_LOCAL)
      LEFT JOIN BD2_DIM_SELECCION         v ON (v.NOMBRE_SELECCION    = s.EQUIPO_VISITA);
  END IF;
END;
/

-- Permisos para que Stage pueda ejecutar procesos de sincronización DW si se requiere
GRANT EXECUTE ON C##dw.PRC_CONSTRUYE_HECHOS   TO C##stage;
GRANT EXECUTE ON C##dw.PRC_DIM_HORA           TO C##stage;
GRANT EXECUTE ON C##dw.PRC_DIM_SELECCION      TO C##stage;
GRANT EXECUTE ON C##dw.PRC_DIM_RONDA          TO C##stage;
GRANT EXECUTE ON C##dw.PRC_DIM_PAIS           TO C##stage;
GRANT EXECUTE ON C##dw.PRC_DIM_CIUDAD         TO C##stage;
GRANT EXECUTE ON C##dw.PRC_DIM_ESTADIO        TO C##stage;
GRANT EXECUTE ON C##dw.PRC_DEVUELVE_CORRELATIVOS TO C##stage;


CREATE OR REPLACE PROCEDURE C##dw.PRC_LLENA_HECHOS(p_accion IN NUMBER) AS

  -- Cursor para recorrer stage y LEFT JOIN con dimensiones
  CURSOR cur_stage IS
    SELECT
      s.ANIO,
      s.FECHA,
      s.HORA,
      s.RONDA,
      s.ESTADIO,
      s.CIUDAD,
      s.PAIS,
      s.EQUIPO_LOCAL,
      s.GOL_LOCAL,
      s.EQUIPO_VISITA,
      s.GOL_VISITA,
      s.ASISTENCIA,
      h.HORA_KEY,
      r.RONDA_KEY,
      e.ESTADIO_KEY,
      l.SELECCION_KEY AS LOCAL_KEY,
      v.SELECCION_KEY AS VISITANTE_KEY
    FROM C##stage.BD2_STG_DATOS s
      LEFT JOIN BD2_DIM_HORA h ON h.HORA = s.HORA
      LEFT JOIN BD2_DIM_RONDA r ON r.NOMBRE_RONDA = s.RONDA
      LEFT JOIN BD2_DIM_ESTADIO e ON e.NOMBRE_ESTADIO = s.ESTADIO
      LEFT JOIN BD2_DIM_SELECCION l ON l.NOMBRE_SELECCION = s.EQUIPO_LOCAL
      LEFT JOIN BD2_DIM_SELECCION v ON v.NOMBRE_SELECCION = s.EQUIPO_VISITA;

BEGIN
  IF p_accion = 1 THEN
    FOR rec IN cur_stage LOOP
      
      -- Validar que todas las claves existan
      IF rec.HORA_KEY IS NOT NULL AND
         rec.RONDA_KEY IS NOT NULL AND
         rec.ESTADIO_KEY IS NOT NULL AND
         rec.LOCAL_KEY IS NOT NULL AND
         rec.VISITANTE_KEY IS NOT NULL THEN

        -- Insertar en hechos
        INSERT INTO BD2_HECHOS (
          ANIO,
          FECHA_KEY,
          HORA_KEY,
          RONDA_KEY,
          ESTADIO_KEY,
          LOCAL_KEY,
          VISITANTE_KEY,
          GOL_LOCAL,
          GOL_VISITA,
          ASISTENCIA
        ) VALUES (
          rec.ANIO,
          TO_NUMBER(TO_CHAR(rec.FECHA,'J')),
          rec.HORA_KEY,
          rec.RONDA_KEY,
          rec.ESTADIO_KEY,
          rec.LOCAL_KEY,
          rec.VISITANTE_KEY,
          rec.GOL_LOCAL,
          rec.GOL_VISITA,
          rec.ASISTENCIA
        );

      ELSE
        -- Insertar en nohechos con los datos originales de stage (los campos según definición de BD2_NO_HECHOS)
        INSERT INTO BD2_NO_HECHOS (
          ANIO,
          FECHA_KEY,
          FECHA_COD,
          HORA_KEY,
          HORA_COD,
          RONDA_KEY,
          NOMBRE_RONDA,
          ESTADIO_KEY,
          ESTADIO,
          CIUDAD,
          PAIS,
          LOCAL_KEY,
          EQUIPO_LOCAL,
          VISITANTE_KEY,
          EQUIPO_VISITA,
          GOL_LOCAL,
          GOL_VISITA,
          ASISTENCIA
        ) VALUES (
          rec.ANIO,
          NULL,             -- FECHA_KEY no existe
          rec.FECHA,
          NULL,             -- HORA_KEY no existe
          rec.HORA,
          NULL,             -- RONDA_KEY no existe
          rec.RONDA,
          NULL,             -- ESTADIO_KEY no existe
          rec.ESTADIO,
          rec.CIUDAD,
          rec.PAIS,
          NULL,             -- LOCAL_KEY no existe
          rec.EQUIPO_LOCAL,
          NULL,             -- VISITANTE_KEY no existe
          rec.EQUIPO_VISITA,
          rec.GOL_LOCAL,
          rec.GOL_VISITA,
          rec.ASISTENCIA
        );
      END IF;

    END LOOP;

    COMMIT;

  END IF;
END;

CREATE OR REPLACE PROCEDURE C##produccion.PRC_LLENA_SEGUIMIENTO(p_dimension IN VARCHAR2) AS
BEGIN
  INSERT INTO BD2_SEGUIMIENTO (DIMENSION, USUARIO, FECHA)
  VALUES (p_dimension, USER, SYSDATE);

  COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE C##dw.PRC_CONSTRUYE_HECHOS(p_accion IN NUMBER) AS
BEGIN
  IF p_accion = 1 THEN
    -- Llenado desde tabla STAGE, validando claves no nulas (como antes)
    INSERT INTO BD2_HECHOS (
      ANIO,
      FECHA_KEY,
      HORA_KEY,
      RONDA_KEY,
      ESTADIO_KEY,
      LOCAL_KEY,
      VISITANTE_KEY,
      GOL_LOCAL,
      GOL_VISITA,
      ASISTENCIA
    )
    SELECT
      s.ANIO,
      TO_NUMBER(TO_CHAR(s.FECHA, 'J')) AS FECHA_KEY,
      h.HORA_KEY,
      r.RONDA_KEY,
      e.ESTADIO_KEY,
      l.SELECCION_KEY,
      v.SELECCION_KEY,
      s.GOL_LOCAL,
      s.GOL_VISITA,
      s.ASISTENCIA
    FROM C##stage.BD2_STG_DATOS s
      LEFT JOIN BD2_DIM_HORA h ON h.HORA = s.HORA
      LEFT JOIN BD2_DIM_RONDA r ON r.NOMBRE_RONDA = s.RONDA
      LEFT JOIN BD2_DIM_ESTADIO e ON e.NOMBRE_ESTADIO = s.ESTADIO
      LEFT JOIN BD2_DIM_SELECCION l ON l.NOMBRE_SELECCION = s.EQUIPO_LOCAL
      LEFT JOIN BD2_DIM_SELECCION v ON v.NOMBRE_SELECCION = s.EQUIPO_VISITA
    WHERE
      h.HORA_KEY IS NOT NULL
      AND r.RONDA_KEY IS NOT NULL
      AND e.ESTADIO_KEY IS NOT NULL
      AND l.SELECCION_KEY IS NOT NULL
      AND v.SELECCION_KEY IS NOT NULL;

  ELSIF p_accion = 2 THEN
    -- Llenado desde tabla NO_HECHOS sin validar claves nulas
    -- Se asume que las dimensiones ya existen y las FK serán correctas o se permite nulos en BD2_HECHOS
    INSERT INTO BD2_HECHOS (
      ANIO,
      FECHA_KEY,
      HORA_KEY,
      RONDA_KEY,
      ESTADIO_KEY,
      LOCAL_KEY,
      VISITANTE_KEY,
      GOL_LOCAL,
      GOL_VISITA,
      ASISTENCIA
    )
    SELECT
      n.ANIO,
      n.FECHA_KEY,
      n.HORA_KEY,
      n.RONDA_KEY,
      n.ESTADIO_KEY,
      n.LOCAL_KEY,
      n.VISITANTE_KEY,
      n.GOL_LOCAL,
      n.GOL_VISITA,
      n.ASISTENCIA
    FROM BD2_NO_HECHOS n;
    
    -- Se asume que el procedimiento PRC_DIM_TIEMPO se ejecuta antes o fuera de este procedimiento
  END IF;

  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE C##dw.PRC_PROCESA_NOHECHOS AS

  CURSOR cur_nohechos IS
    SELECT 
      FECHA_KEY,
      HORA_KEY,
      RONDA_KEY,
      ESTADIO_KEY,
      LOCAL_KEY,
      VISITANTE_KEY
    FROM BD2_NO_HECHOS;

  -- Variables para control de llamadas (evitar llamadas múltiples si no hay NULLs)
  v_llamar_hora BOOLEAN := FALSE;
  v_llamar_ronda BOOLEAN := FALSE;
  v_llamar_estadio BOOLEAN := FALSE;
  v_llamar_local BOOLEAN := FALSE;
  v_llamar_visitante BOOLEAN := FALSE;
  v_llamar_fecha BOOLEAN := FALSE;

BEGIN

  -- Inicializamos flags
  v_llamar_hora := FALSE;
  v_llamar_ronda := FALSE;
  v_llamar_estadio := FALSE;
  v_llamar_local := FALSE;
  v_llamar_visitante := FALSE;
  v_llamar_fecha := FALSE;

  FOR rec IN cur_nohechos LOOP

    -- Detectar claves nulas
    IF rec.FECHA_KEY IS NULL THEN
      v_llamar_fecha := TRUE;
    END IF;

    IF rec.HORA_KEY IS NULL THEN
      v_llamar_hora := TRUE;
    END IF;

    IF rec.RONDA_KEY IS NULL THEN
      v_llamar_ronda := TRUE;
    END IF;

    IF rec.ESTADIO_KEY IS NULL THEN
      v_llamar_estadio := TRUE;
    END IF;

    IF rec.LOCAL_KEY IS NULL THEN
      v_llamar_local := TRUE;
    END IF;

    IF rec.VISITANTE_KEY IS NULL THEN
      v_llamar_visitante := TRUE;
    END IF;

    -- Si ya detectamos que se debe llamar a todos, salimos del cursor para optimizar
    IF v_llamar_fecha AND v_llamar_hora AND v_llamar_ronda AND v_llamar_estadio AND v_llamar_local AND v_llamar_visitante THEN
      EXIT;
    END IF;

  END LOOP;

  -- Llamadas a procedimientos correspondientes sólo si detectamos claves nulas

  IF v_llamar_fecha THEN
    -- Asumiendo que PRC_DIM_TIEMPO existe y recibe parámetro 2 para procesar no_hechos
    C##dw.PRC_DIM_TIEMPO(2);
  END IF;

  IF v_llamar_hora THEN
    C##dw.PRC_DIM_HORA(2);
  END IF;

  IF v_llamar_ronda THEN
    C##dw.PRC_DIM_RONDA(2);
  END IF;

  IF v_llamar_estadio THEN
    C##dw.PRC_DIM_ESTADIO(2);
  END IF;

  IF v_llamar_local THEN
    C##dw.PRC_DIM_SELECCION(2);  -- Asumo que local y visitante usan misma dimensión SELECCION
  END IF;

  IF v_llamar_visitante THEN
    C##dw.PRC_DIM_SELECCION(2);
  END IF;

  COMMIT;

END;
